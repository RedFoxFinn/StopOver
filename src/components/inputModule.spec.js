import React from 'react';
import { render, screen, within } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { act, isCompositeComponentWithType } from 'react-dom/test-utils';
import { Provider, useSelector } from 'react-redux';
import Button from '@mui/material/Button';

import store from '../controllers/redux/store';
import { InputModule } from './inputModule';
import { AddressInput } from './addressInput';
import { configureStore } from '@reduxjs/toolkit';

describe('inputModule - unit tests', () => {
  let dummy = false;
  it('dummy', () => {
    expect(dummy).toBe(false);
    dummy = true;
    expect(dummy).toBe(true);
  });
  it('InputModule renders', () => {
    render(<Provider store={store}><InputModule id='stopover.unit.test' /></Provider>);
    const component = screen.queryByTestId('stopover.unit.test');
    expect(component).toBeTruthy();
    isCompositeComponentWithType(component, InputModule);
    const start = screen.queryByTestId('stopover.unit.test.address-form-start');
    const end = screen.queryByTestId('stopover.unit.test.address-form-end');
    expect(start).toBeTruthy();
    isCompositeComponentWithType(start, AddressInput);
    expect(end).toBeTruthy();
    isCompositeComponentWithType(end, AddressInput);
    const creator = screen.queryByTestId('stopover.unit.test.generate-route');
    expect(creator).toBeTruthy();
    isCompositeComponentWithType(creator, Button);
    expect(creator.textContent).toMatch('Luo');
    expect(creator.textContent).toMatch('reitti');
    expect(creator.textContent).toMatch('Luo reitti');
  });
});

describe('inputModule - integration tests', () => {
  let dummy = false;
  it('dummy', () => {
    expect(dummy).toBe(false);
    dummy = true;
    expect(dummy).toBe(true);
  });
  it('AddressInput - start', () => {
    render(<Provider store={store}><InputModule id='stopover.integration.test' /></Provider>);
    const start = screen.queryByTestId('stopover.integration.test.address-form-start');
    expect(start).toBeTruthy();
    isCompositeComponentWithType(start, AddressInput);
    let state = store.getState().start;
    expect(state.street).toMatch('');
    expect(state.number).toMatch('');
    expect(state.municipality).toMatch('');
    expect(state.name).toMatch('');
    expect(state.geocode).toBe(null);
    const street = within(start).getByLabelText('katu');
    const number = within(start).getByLabelText('numero');
    const municipality = within(start).getByLabelText('kunta');
    const name = within(start).getByLabelText('nimi');
    expect(street).toBeTruthy();
    expect(number).toBeTruthy();
    expect(municipality).toBeTruthy();
    expect(name).toBeTruthy();
    expect(street.value).toBe('');
    expect(number.value).toBe('');
    expect(municipality.value).toBe('');
    expect(name.value).toBe('');
    act(() => {
      userEvent.type(street, 'Kaivokatu');
      userEvent.type(number, '2');
      userEvent.type(municipality, 'Helsinki');
      userEvent.type(name, 'Kaivokatu');
    });
    expect(street.value).toBe('Kaivokatu');
    expect(number.value).toBe('2');
    expect(municipality.value).toBe('Helsinki');
    expect(name.value).toBe('Kaivokatu');
    state = store.getState().start;
    expect(state.street).toMatch('Kaivokatu');
    expect(state.number).toMatch('2');
    expect(state.municipality).toMatch('Helsinki');
    expect(state.name).toMatch('Kaivokatu');
    act(() => userEvent.click(within(start).getByText('Aseta')));
    setTimeout(() => {
      expect(street.value).toBe('');
      expect(number.value).toBe('');
      expect(municipality.value).toBe('');
      expect(name.value).toBe('');
      state = store.getState().start;
      expect(state.street).toMatch('');
      expect(state.number).toMatch('');
      expect(state.municipality).toMatch('');
      expect(state.name).toMatch('');
      expect(state.geocode).not.toBe(null);
    }, 1000);
  });
  it('AddressInput - end', () => {
    render(<Provider store={store}><InputModule id='stopover.integration.test' /></Provider>);
    const end = screen.queryByTestId('stopover.integration.test.address-form-end');
    expect(end).toBeTruthy();
    isCompositeComponentWithType(end, AddressInput);
    let state = store.getState().end;
    expect(state.street).toMatch('');
    expect(state.number).toMatch('');
    expect(state.municipality).toMatch('');
    expect(state.name).toMatch('');
    expect(state.geocode).toBe(null);
    const street = within(end).getByLabelText('katu');
    const number = within(end).getByLabelText('numero');
    const municipality = within(end).getByLabelText('kunta');
    const name = within(end).getByLabelText('nimi');
    expect(street).toBeTruthy();
    expect(number).toBeTruthy();
    expect(municipality).toBeTruthy();
    expect(name).toBeTruthy();
    expect(street.value).toBe('');
    expect(number.value).toBe('');
    expect(municipality.value).toBe('');
    expect(name.value).toBe('');
    act(() => {
      userEvent.type(street, 'Tietotie');
      userEvent.type(number, '14');
      userEvent.type(municipality, 'Vantaa');
      userEvent.type(name, 'Tietotie');
    });
    expect(street.value).toBe('Tietotie');
    expect(number.value).toBe('14');
    expect(municipality.value).toBe('Vantaa');
    expect(name.value).toBe('Tietotie');
    state = store.getState().end;
    expect(state.street).toMatch('Tietotie');
    expect(state.number).toMatch('14');
    expect(state.municipality).toMatch('Vantaa');
    expect(state.name).toMatch('Tietotie');
    act(() => userEvent.click(within(end).getByText('Aseta')));
    setTimeout(() => {
      expect(street.value).toBe('');
      expect(number.value).toBe('');
      expect(municipality.value).toBe('');
      expect(name.value).toBe('');
      state = store.getState().end;
      expect(state.street).toMatch('');
      expect(state.number).toMatch('');
      expect(state.municipality).toMatch('');
      expect(state.name).toMatch('');
      expect(state.geocode).not.toBe(null);
    }, 1000);
  });
  it('InputModule - generate-route', () => {
    render(<Provider store={store}><InputModule id='stopover.integration.test' /></Provider>);
    let state_routes = store.getState().route;
    expect(state_routes.routes.length).toBe(0);
    const start = screen.queryByTestId('stopover.integration.test.address-form-start');
    expect(start).toBeTruthy();
    isCompositeComponentWithType(start, AddressInput);
    let state_start = store.getState().start;
    expect(state_start.street).toMatch('');
    expect(state_start.number).toMatch('');
    expect(state_start.municipality).toMatch('');
    expect(state_start.name).toMatch('');
    expect(state_start.geocode).toBe(null);
    let street = within(start).getByLabelText('katu');
    let number = within(start).getByLabelText('numero');
    let municipality = within(start).getByLabelText('kunta');
    let name = within(start).getByLabelText('nimi');
    expect(street).toBeTruthy();
    expect(number).toBeTruthy();
    expect(municipality).toBeTruthy();
    expect(name).toBeTruthy();
    expect(street.value).toBe('');
    expect(number.value).toBe('');
    expect(municipality.value).toBe('');
    expect(name.value).toBe('');
    act(() => {
      userEvent.type(street, 'Kaivokatu');
      userEvent.type(number, '2');
      userEvent.type(municipality, 'Helsinki');
      userEvent.type(name, 'Kaivokatu');
    });
    expect(street.value).toBe('Kaivokatu');
    expect(number.value).toBe('2');
    expect(municipality.value).toBe('Helsinki');
    expect(name.value).toBe('Kaivokatu');
    state_start = store.getState().start;
    expect(state_start.street).toMatch('Kaivokatu');
    expect(state_start.number).toMatch('2');
    expect(state_start.municipality).toMatch('Helsinki');
    expect(state_start.name).toMatch('Kaivokatu');
    expect(state_start.geocode).toBe(null);
    act(() => userEvent.click(within(start).getByText('Aseta')));
    setTimeout(() => {
      expect(street.value).toBe('');
      expect(number.value).toBe('');
      expect(municipality.value).toBe('');
      expect(name.value).toBe('');
      state_start = store.getState().start;
      expect(state_start.street).toMatch('');
      expect(state_start.number).toMatch('');
      expect(state_start.municipality).toMatch('');
      expect(state_start.name).toMatch('');
      expect(state_start.geocode).not.toBe(null);
    }, 1000);
    const end = screen.queryByTestId('stopover.integration.test.address-form-end');
    expect(end).toBeTruthy();
    isCompositeComponentWithType(end, AddressInput);
    let state_end = store.getState().end;
    expect(state_end.street).toMatch('');
    expect(state_end.number).toMatch('');
    expect(state_end.municipality).toMatch('');
    expect(state_end.name).toMatch('');
    expect(state_end.geocode).toBe(null);
    street = within(end).getByLabelText('katu');
    number = within(end).getByLabelText('numero');
    municipality = within(end).getByLabelText('kunta');
    name = within(end).getByLabelText('nimi');
    expect(street).toBeTruthy();
    expect(number).toBeTruthy();
    expect(municipality).toBeTruthy();
    expect(name).toBeTruthy();
    expect(street.value).toBe('');
    expect(number.value).toBe('');
    expect(municipality.value).toBe('');
    expect(name.value).toBe('');
    act(() => {
      userEvent.type(street, 'Tietotie');
      userEvent.type(number, '14');
      userEvent.type(municipality, 'Vantaa');
      userEvent.type(name, 'Tietotie');
    });
    expect(street.value).toBe('Tietotie');
    expect(number.value).toBe('14');
    expect(municipality.value).toBe('Vantaa');
    expect(name.value).toBe('Tietotie');
    state_end = store.getState().end;
    expect(state_end.street).toMatch('Tietotie');
    expect(state_end.number).toMatch('14');
    expect(state_end.municipality).toMatch('Vantaa');
    expect(state_end.name).toMatch('Tietotie');
    expect(state_end.geocode).toBe(null);
    act(() => userEvent.click(within(end).getByText('Aseta')));
    setTimeout(() => {
      expect(street.value).toBe('');
      expect(number.value).toBe('');
      expect(municipality.value).toBe('');
      expect(name.value).toBe('');
      state_end = store.getState().end;
      expect(state_end.street).toMatch('');
      expect(state_end.number).toMatch('');
      expect(state_end.municipality).toMatch('');
      expect(state_end.name).toMatch('');
      expect(state_end.geocode).not.toBe(null);
    }, 1000);
    const creator = screen.queryByTestId('stopover.integration.test.generate-route');
    expect(creator).toBeTruthy();
    isCompositeComponentWithType(creator, Button);
    act(() => userEvent.click(creator));
    setTimeout(() => {
      state_start = store.getState().start;
      state_end = store.getState().end;
      expect(state_start.street).toMatch('');
      expect(state_start.number).toMatch('');
      expect(state_start.municipality).toMatch('');
      expect(state_start.name).toMatch('');
      expect(state_start.geocode).toBe(null);
      expect(state_end.street).toMatch('');
      expect(state_end.number).toMatch('');
      expect(state_end.municipality).toMatch('');
      expect(state_end.name).toMatch('');
      expect(state_end.geocode).toBe(null);
      state_routes = store.getState().route;
      expect(state_routes.routes.length).toBe(1);
    }, 1000);
  });
});
